// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model/EmailProvjera.proto

#ifndef PROTOBUF_model_2fEmailProvjera_2eproto__INCLUDED
#define PROTOBUF_model_2fEmailProvjera_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace emajliramokade {
namespace email {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_model_2fEmailProvjera_2eproto();
void protobuf_AssignDesc_model_2fEmailProvjera_2eproto();
void protobuf_ShutdownFile_model_2fEmailProvjera_2eproto();

class Zahtjev;
class Odgovor;

// ===================================================================

class Zahtjev : public ::google::protobuf::Message {
 public:
  Zahtjev();
  virtual ~Zahtjev();

  Zahtjev(const Zahtjev& from);

  inline Zahtjev& operator=(const Zahtjev& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Zahtjev& default_instance();

  void Swap(Zahtjev* other);

  // implements Message ----------------------------------------------

  Zahtjev* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Zahtjev& from);
  void MergeFrom(const Zahtjev& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string email = 1;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 1;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional string kadaID = 2;
  inline bool has_kadaid() const;
  inline void clear_kadaid();
  static const int kKadaIDFieldNumber = 2;
  inline const ::std::string& kadaid() const;
  inline void set_kadaid(const ::std::string& value);
  inline void set_kadaid(const char* value);
  inline void set_kadaid(const char* value, size_t size);
  inline ::std::string* mutable_kadaid();
  inline ::std::string* release_kadaid();
  inline void set_allocated_kadaid(::std::string* kadaid);

  // @@protoc_insertion_point(class_scope:com.emajliramokade.email.proto.Zahtjev)
 private:
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_kadaid();
  inline void clear_has_kadaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* email_;
  ::std::string* kadaid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_model_2fEmailProvjera_2eproto();
  friend void protobuf_AssignDesc_model_2fEmailProvjera_2eproto();
  friend void protobuf_ShutdownFile_model_2fEmailProvjera_2eproto();

  void InitAsDefaultInstance();
  static Zahtjev* default_instance_;
};
// -------------------------------------------------------------------

class Odgovor : public ::google::protobuf::Message {
 public:
  Odgovor();
  virtual ~Odgovor();

  Odgovor(const Odgovor& from);

  inline Odgovor& operator=(const Odgovor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Odgovor& default_instance();

  void Swap(Odgovor* other);

  // implements Message ----------------------------------------------

  Odgovor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Odgovor& from);
  void MergeFrom(const Odgovor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline bool status() const;
  inline void set_status(bool value);

  // required string poruka = 2;
  inline bool has_poruka() const;
  inline void clear_poruka();
  static const int kPorukaFieldNumber = 2;
  inline const ::std::string& poruka() const;
  inline void set_poruka(const ::std::string& value);
  inline void set_poruka(const char* value);
  inline void set_poruka(const char* value, size_t size);
  inline ::std::string* mutable_poruka();
  inline ::std::string* release_poruka();
  inline void set_allocated_poruka(::std::string* poruka);

  // @@protoc_insertion_point(class_scope:com.emajliramokade.email.proto.Odgovor)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_poruka();
  inline void clear_has_poruka();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* poruka_;
  bool status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_model_2fEmailProvjera_2eproto();
  friend void protobuf_AssignDesc_model_2fEmailProvjera_2eproto();
  friend void protobuf_ShutdownFile_model_2fEmailProvjera_2eproto();

  void InitAsDefaultInstance();
  static Odgovor* default_instance_;
};
// ===================================================================


// ===================================================================

// Zahtjev

// required string email = 1;
inline bool Zahtjev::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Zahtjev::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Zahtjev::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Zahtjev::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Zahtjev::email() const {
  return *email_;
}
inline void Zahtjev::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Zahtjev::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Zahtjev::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Zahtjev::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* Zahtjev::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Zahtjev::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string kadaID = 2;
inline bool Zahtjev::has_kadaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Zahtjev::set_has_kadaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Zahtjev::clear_has_kadaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Zahtjev::clear_kadaid() {
  if (kadaid_ != &::google::protobuf::internal::kEmptyString) {
    kadaid_->clear();
  }
  clear_has_kadaid();
}
inline const ::std::string& Zahtjev::kadaid() const {
  return *kadaid_;
}
inline void Zahtjev::set_kadaid(const ::std::string& value) {
  set_has_kadaid();
  if (kadaid_ == &::google::protobuf::internal::kEmptyString) {
    kadaid_ = new ::std::string;
  }
  kadaid_->assign(value);
}
inline void Zahtjev::set_kadaid(const char* value) {
  set_has_kadaid();
  if (kadaid_ == &::google::protobuf::internal::kEmptyString) {
    kadaid_ = new ::std::string;
  }
  kadaid_->assign(value);
}
inline void Zahtjev::set_kadaid(const char* value, size_t size) {
  set_has_kadaid();
  if (kadaid_ == &::google::protobuf::internal::kEmptyString) {
    kadaid_ = new ::std::string;
  }
  kadaid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Zahtjev::mutable_kadaid() {
  set_has_kadaid();
  if (kadaid_ == &::google::protobuf::internal::kEmptyString) {
    kadaid_ = new ::std::string;
  }
  return kadaid_;
}
inline ::std::string* Zahtjev::release_kadaid() {
  clear_has_kadaid();
  if (kadaid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = kadaid_;
    kadaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Zahtjev::set_allocated_kadaid(::std::string* kadaid) {
  if (kadaid_ != &::google::protobuf::internal::kEmptyString) {
    delete kadaid_;
  }
  if (kadaid) {
    set_has_kadaid();
    kadaid_ = kadaid;
  } else {
    clear_has_kadaid();
    kadaid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Odgovor

// required bool status = 1;
inline bool Odgovor::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Odgovor::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Odgovor::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Odgovor::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool Odgovor::status() const {
  return status_;
}
inline void Odgovor::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// required string poruka = 2;
inline bool Odgovor::has_poruka() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Odgovor::set_has_poruka() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Odgovor::clear_has_poruka() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Odgovor::clear_poruka() {
  if (poruka_ != &::google::protobuf::internal::kEmptyString) {
    poruka_->clear();
  }
  clear_has_poruka();
}
inline const ::std::string& Odgovor::poruka() const {
  return *poruka_;
}
inline void Odgovor::set_poruka(const ::std::string& value) {
  set_has_poruka();
  if (poruka_ == &::google::protobuf::internal::kEmptyString) {
    poruka_ = new ::std::string;
  }
  poruka_->assign(value);
}
inline void Odgovor::set_poruka(const char* value) {
  set_has_poruka();
  if (poruka_ == &::google::protobuf::internal::kEmptyString) {
    poruka_ = new ::std::string;
  }
  poruka_->assign(value);
}
inline void Odgovor::set_poruka(const char* value, size_t size) {
  set_has_poruka();
  if (poruka_ == &::google::protobuf::internal::kEmptyString) {
    poruka_ = new ::std::string;
  }
  poruka_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Odgovor::mutable_poruka() {
  set_has_poruka();
  if (poruka_ == &::google::protobuf::internal::kEmptyString) {
    poruka_ = new ::std::string;
  }
  return poruka_;
}
inline ::std::string* Odgovor::release_poruka() {
  clear_has_poruka();
  if (poruka_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = poruka_;
    poruka_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Odgovor::set_allocated_poruka(::std::string* poruka) {
  if (poruka_ != &::google::protobuf::internal::kEmptyString) {
    delete poruka_;
  }
  if (poruka) {
    set_has_poruka();
    poruka_ = poruka;
  } else {
    clear_has_poruka();
    poruka_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace email
}  // namespace emajliramokade
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_2fEmailProvjera_2eproto__INCLUDED
