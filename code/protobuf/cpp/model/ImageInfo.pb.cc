// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model/ImageInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model/ImageInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace emajliramokade {
namespace proto {
namespace ImageInfo {

namespace {

const ::google::protobuf::Descriptor* Zahtjev_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zahtjev_reflection_ = NULL;
const ::google::protobuf::Descriptor* DimenzijaSlike_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DimenzijaSlike_reflection_ = NULL;
const ::google::protobuf::Descriptor* Odgovor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Odgovor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_model_2fImageInfo_2eproto() {
  protobuf_AddDesc_model_2fImageInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "model/ImageInfo.proto");
  GOOGLE_CHECK(file != NULL);
  Zahtjev_descriptor_ = file->message_type(0);
  static const int Zahtjev_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zahtjev, velicinaslike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zahtjev, originalnaslika_),
  };
  Zahtjev_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zahtjev_descriptor_,
      Zahtjev::default_instance_,
      Zahtjev_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zahtjev, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zahtjev, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zahtjev));
  DimenzijaSlike_descriptor_ = file->message_type(1);
  static const int DimenzijaSlike_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimenzijaSlike, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimenzijaSlike, height_),
  };
  DimenzijaSlike_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DimenzijaSlike_descriptor_,
      DimenzijaSlike::default_instance_,
      DimenzijaSlike_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimenzijaSlike, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimenzijaSlike, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DimenzijaSlike));
  Odgovor_descriptor_ = file->message_type(2);
  static const int Odgovor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odgovor, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odgovor, poruka_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odgovor, velicinaslike_),
  };
  Odgovor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Odgovor_descriptor_,
      Odgovor::default_instance_,
      Odgovor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odgovor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odgovor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Odgovor));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_model_2fImageInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zahtjev_descriptor_, &Zahtjev::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DimenzijaSlike_descriptor_, &DimenzijaSlike::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Odgovor_descriptor_, &Odgovor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_model_2fImageInfo_2eproto() {
  delete Zahtjev::default_instance_;
  delete Zahtjev_reflection_;
  delete DimenzijaSlike::default_instance_;
  delete DimenzijaSlike_reflection_;
  delete Odgovor::default_instance_;
  delete Odgovor_reflection_;
}

void protobuf_AddDesc_model_2fImageInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025model/ImageInfo.proto\022\"com.emajliramok"
    "ade.proto.ImageInfo\"9\n\007Zahtjev\022\025\n\rvelici"
    "naSlike\030\001 \002(\r\022\027\n\017originalnaSlika\030\002 \002(\014\"/"
    "\n\016DimenzijaSlike\022\r\n\005width\030\001 \002(\r\022\016\n\006heigh"
    "t\030\002 \002(\r\"t\n\007Odgovor\022\016\n\006status\030\001 \002(\010\022\016\n\006po"
    "ruka\030\002 \002(\t\022I\n\rvelicinaSlike\030\003 \001(\01322.com."
    "emajliramokade.proto.ImageInfo.Dimenzija"
    "Slike", 285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model/ImageInfo.proto", &protobuf_RegisterTypes);
  Zahtjev::default_instance_ = new Zahtjev();
  DimenzijaSlike::default_instance_ = new DimenzijaSlike();
  Odgovor::default_instance_ = new Odgovor();
  Zahtjev::default_instance_->InitAsDefaultInstance();
  DimenzijaSlike::default_instance_->InitAsDefaultInstance();
  Odgovor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_model_2fImageInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_model_2fImageInfo_2eproto {
  StaticDescriptorInitializer_model_2fImageInfo_2eproto() {
    protobuf_AddDesc_model_2fImageInfo_2eproto();
  }
} static_descriptor_initializer_model_2fImageInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Zahtjev::kVelicinaSlikeFieldNumber;
const int Zahtjev::kOriginalnaSlikaFieldNumber;
#endif  // !_MSC_VER

Zahtjev::Zahtjev()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zahtjev::InitAsDefaultInstance() {
}

Zahtjev::Zahtjev(const Zahtjev& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zahtjev::SharedCtor() {
  _cached_size_ = 0;
  velicinaslike_ = 0u;
  originalnaslika_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zahtjev::~Zahtjev() {
  SharedDtor();
}

void Zahtjev::SharedDtor() {
  if (originalnaslika_ != &::google::protobuf::internal::kEmptyString) {
    delete originalnaslika_;
  }
  if (this != default_instance_) {
  }
}

void Zahtjev::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zahtjev::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zahtjev_descriptor_;
}

const Zahtjev& Zahtjev::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2fImageInfo_2eproto();
  return *default_instance_;
}

Zahtjev* Zahtjev::default_instance_ = NULL;

Zahtjev* Zahtjev::New() const {
  return new Zahtjev;
}

void Zahtjev::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    velicinaslike_ = 0u;
    if (has_originalnaslika()) {
      if (originalnaslika_ != &::google::protobuf::internal::kEmptyString) {
        originalnaslika_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zahtjev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 velicinaSlike = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &velicinaslike_)));
          set_has_velicinaslike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_originalnaSlika;
        break;
      }

      // required bytes originalnaSlika = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originalnaSlika:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_originalnaslika()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zahtjev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 velicinaSlike = 1;
  if (has_velicinaslike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->velicinaslike(), output);
  }

  // required bytes originalnaSlika = 2;
  if (has_originalnaslika()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->originalnaslika(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zahtjev::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 velicinaSlike = 1;
  if (has_velicinaslike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->velicinaslike(), target);
  }

  // required bytes originalnaSlika = 2;
  if (has_originalnaslika()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->originalnaslika(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zahtjev::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 velicinaSlike = 1;
    if (has_velicinaslike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->velicinaslike());
    }

    // required bytes originalnaSlika = 2;
    if (has_originalnaslika()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->originalnaslika());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zahtjev::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zahtjev* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zahtjev*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zahtjev::MergeFrom(const Zahtjev& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_velicinaslike()) {
      set_velicinaslike(from.velicinaslike());
    }
    if (from.has_originalnaslika()) {
      set_originalnaslika(from.originalnaslika());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zahtjev::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zahtjev::CopyFrom(const Zahtjev& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zahtjev::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Zahtjev::Swap(Zahtjev* other) {
  if (other != this) {
    std::swap(velicinaslike_, other->velicinaslike_);
    std::swap(originalnaslika_, other->originalnaslika_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zahtjev::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zahtjev_descriptor_;
  metadata.reflection = Zahtjev_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DimenzijaSlike::kWidthFieldNumber;
const int DimenzijaSlike::kHeightFieldNumber;
#endif  // !_MSC_VER

DimenzijaSlike::DimenzijaSlike()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DimenzijaSlike::InitAsDefaultInstance() {
}

DimenzijaSlike::DimenzijaSlike(const DimenzijaSlike& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DimenzijaSlike::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DimenzijaSlike::~DimenzijaSlike() {
  SharedDtor();
}

void DimenzijaSlike::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DimenzijaSlike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DimenzijaSlike::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DimenzijaSlike_descriptor_;
}

const DimenzijaSlike& DimenzijaSlike::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2fImageInfo_2eproto();
  return *default_instance_;
}

DimenzijaSlike* DimenzijaSlike::default_instance_ = NULL;

DimenzijaSlike* DimenzijaSlike::New() const {
  return new DimenzijaSlike;
}

void DimenzijaSlike::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0u;
    height_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DimenzijaSlike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DimenzijaSlike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DimenzijaSlike::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DimenzijaSlike::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DimenzijaSlike::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DimenzijaSlike* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DimenzijaSlike*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DimenzijaSlike::MergeFrom(const DimenzijaSlike& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DimenzijaSlike::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimenzijaSlike::CopyFrom(const DimenzijaSlike& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimenzijaSlike::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DimenzijaSlike::Swap(DimenzijaSlike* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DimenzijaSlike::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DimenzijaSlike_descriptor_;
  metadata.reflection = DimenzijaSlike_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Odgovor::kStatusFieldNumber;
const int Odgovor::kPorukaFieldNumber;
const int Odgovor::kVelicinaSlikeFieldNumber;
#endif  // !_MSC_VER

Odgovor::Odgovor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Odgovor::InitAsDefaultInstance() {
  velicinaslike_ = const_cast< ::com::emajliramokade::proto::ImageInfo::DimenzijaSlike*>(&::com::emajliramokade::proto::ImageInfo::DimenzijaSlike::default_instance());
}

Odgovor::Odgovor(const Odgovor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Odgovor::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  poruka_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  velicinaslike_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Odgovor::~Odgovor() {
  SharedDtor();
}

void Odgovor::SharedDtor() {
  if (poruka_ != &::google::protobuf::internal::kEmptyString) {
    delete poruka_;
  }
  if (this != default_instance_) {
    delete velicinaslike_;
  }
}

void Odgovor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Odgovor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Odgovor_descriptor_;
}

const Odgovor& Odgovor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2fImageInfo_2eproto();
  return *default_instance_;
}

Odgovor* Odgovor::default_instance_ = NULL;

Odgovor* Odgovor::New() const {
  return new Odgovor;
}

void Odgovor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = false;
    if (has_poruka()) {
      if (poruka_ != &::google::protobuf::internal::kEmptyString) {
        poruka_->clear();
      }
    }
    if (has_velicinaslike()) {
      if (velicinaslike_ != NULL) velicinaslike_->::com::emajliramokade::proto::ImageInfo::DimenzijaSlike::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Odgovor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_poruka;
        break;
      }

      // required string poruka = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poruka:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poruka()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poruka().data(), this->poruka().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_velicinaSlike;
        break;
      }

      // optional .com.emajliramokade.proto.ImageInfo.DimenzijaSlike velicinaSlike = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velicinaSlike:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velicinaslike()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Odgovor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // required string poruka = 2;
  if (has_poruka()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poruka().data(), this->poruka().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->poruka(), output);
  }

  // optional .com.emajliramokade.proto.ImageInfo.DimenzijaSlike velicinaSlike = 3;
  if (has_velicinaslike()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->velicinaslike(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Odgovor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // required string poruka = 2;
  if (has_poruka()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poruka().data(), this->poruka().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->poruka(), target);
  }

  // optional .com.emajliramokade.proto.ImageInfo.DimenzijaSlike velicinaSlike = 3;
  if (has_velicinaslike()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->velicinaslike(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Odgovor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool status = 1;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // required string poruka = 2;
    if (has_poruka()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poruka());
    }

    // optional .com.emajliramokade.proto.ImageInfo.DimenzijaSlike velicinaSlike = 3;
    if (has_velicinaslike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velicinaslike());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Odgovor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Odgovor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Odgovor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Odgovor::MergeFrom(const Odgovor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_poruka()) {
      set_poruka(from.poruka());
    }
    if (from.has_velicinaslike()) {
      mutable_velicinaslike()->::com::emajliramokade::proto::ImageInfo::DimenzijaSlike::MergeFrom(from.velicinaslike());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Odgovor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odgovor::CopyFrom(const Odgovor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odgovor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_velicinaslike()) {
    if (!this->velicinaslike().IsInitialized()) return false;
  }
  return true;
}

void Odgovor::Swap(Odgovor* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(poruka_, other->poruka_);
    std::swap(velicinaslike_, other->velicinaslike_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Odgovor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Odgovor_descriptor_;
  metadata.reflection = Odgovor_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ImageInfo
}  // namespace proto
}  // namespace emajliramokade
}  // namespace com

// @@protoc_insertion_point(global_scope)
