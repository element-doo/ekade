/**
 * THIS FILE IS GENERATED BY jsonrpcstub, DO NOT CHANGE IT!!!!!
 */

#ifndef _ABSTRACTIMGSERVER_H_
#define _ABSTRACTIMGSERVER_H_

#include <jsonrpc/rpc.h>

class AbstractIMGServer : public jsonrpc::AbstractServer<AbstractIMGServer>
{
    public:
        AbstractIMGServer(jsonrpc::AbstractServerConnector* conn) :
            jsonrpc::AbstractServer<AbstractIMGServer>(conn) 
        {
            this->bindAndAddMethod(new jsonrpc::Procedure("resize", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "body",jsonrpc::JSON_STRING,"format",jsonrpc::JSON_STRING,"height",jsonrpc::JSON_STRING,"maxHeight",jsonrpc::JSON_STRING,"maxWidth",jsonrpc::JSON_STRING,"width",jsonrpc::JSON_STRING, NULL), &AbstractIMGServer::resizeI);

        }
        
        inline virtual void resizeI(const Json::Value& request, Json::Value& response) 
        {
            response = this->resize(request["body"].asString(), request["format"].asString(), request["height"].asString(), request["maxHeight"].asString(), request["maxWidth"].asString(), request["width"].asString());
        }


        virtual Json::Value resize(const std::string& body, const std::string& format, const std::string& height, const std::string& maxHeight, const std::string& maxWidth, const std::string& width) = 0;

};
#endif //_ABSTRACTIMGSERVER_H_
