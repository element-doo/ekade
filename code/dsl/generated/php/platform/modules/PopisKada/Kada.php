<?php
namespace PopisKada;

require_once __DIR__.'/KadaJsonConverter.php';
require_once __DIR__.'/KadaArrayConverter.php';
require_once __DIR__.'/../Resursi/SlikeKade.php';

/**
 * Generated from NGS DSL
 *
 * @property string $URI a unique object identifier (read-only)
 * @property \NGS\UUID $ID a uuid
 * @property \NGS\Timestamp $dodana autogenerated by server (read-only)
 * @property \NGS\Timestamp $odobrena a timestamp with time zone, can be null
 * @property \NGS\Timestamp $odbijena a timestamp with time zone, can be null
 * @property int $brojacSlanja an integer number
 * @property \NGS\UUID $slikeKadeID used by reference $slikeKade (read-only)
 * @property string $slikeKadeURI reference to an object of class "Resursi\SlikeKade" (read-only)
 * @property \Resursi\SlikeKade $slikeKade an object of class "Resursi\SlikeKade", can be null
 *
 * @package PopisKada
 * @version 0.9.9 beta
 */
class Kada extends \NGS\Patterns\AggregateRoot implements \IteratorAggregate
{
    protected $URI;
    protected $ID;
    protected $dodana;
    protected $odobrena;
    protected $odbijena;
    protected $brojacSlanja;
    protected $slikeKadeID;
    protected $slikeKadeURI;
    protected $slikeKade;

    /**
     * Constructs object using a key-property array or instance of class "PopisKada\Kada"
     *
     * @param array|void $data key-property array or instance of class "PopisKada\Kada" or pass void to provide all fields with defaults
     */
    public function __construct($data = array(), $construction_type = '')
    {
        if(is_array($data) && $construction_type !== 'build_internal') {
            foreach($data as $key => $val) {
                if(in_array($key, self::$_read_only_properties, true))
                    throw new \LogicException($key.' is a read only property and can\'t be set through the constructor.');
            }
        }
        if (is_array($data)) {
            $this->fromArray($data);
        } else {
            throw new \InvalidArgumentException('Constructor parameter must be an array! Type was: '.\NGS\Utils::getType($data));
        }
    }

    /**
     * Supply default values for uninitialized properties
     *
     * @param array $data key-property array which will be filled in-place
     */
    private static function provideDefaults(array &$data)
    {
        if(!array_key_exists('URI', $data))
            $data['URI'] = null; //a string representing a unique object identifier
        if(!array_key_exists('ID', $data))
            $data['ID'] = new \NGS\UUID(); // a uuid
        if(!array_key_exists('dodana', $data))
            $data['dodana'] = new \NGS\Timestamp(); // a timestamp with time zone
        if(!array_key_exists('brojacSlanja', $data))
            $data['brojacSlanja'] = 0; // an integer number
    }

    /**
     * Constructs object from a key-property array
     *
     * @param array $data key-property array
     */
    private function fromArray(array $data)
    {
        $this->provideDefaults($data);

        if(isset($data['URI']))
            $this->URI = \NGS\Converter\PrimitiveConverter::toString($data['URI']);
        unset($data['URI']);
        if (array_key_exists('ID', $data))
            $this->setID($data['ID']);
        unset($data['ID']);
        if (array_key_exists('dodana', $data))
            $this->setDodana($data['dodana']);
        unset($data['dodana']);
        if (array_key_exists('odobrena', $data))
            $this->setOdobrena($data['odobrena']);
        unset($data['odobrena']);
        if (array_key_exists('odbijena', $data))
            $this->setOdbijena($data['odbijena']);
        unset($data['odbijena']);
        if (array_key_exists('brojacSlanja', $data))
            $this->setBrojacSlanja($data['brojacSlanja']);
        unset($data['brojacSlanja']);
        if (array_key_exists('slikeKadeID', $data))
            $this->setSlikeKadeID($data['slikeKadeID']);
        unset($data['slikeKadeID']);
        if (array_key_exists('slikeKade', $data))
            $this->setSlikeKade($data['slikeKade']);
        unset($data['slikeKade']);
        if(array_key_exists('slikeKadeURI', $data))
            $this->slikeKadeURI = $data['slikeKadeURI'] === null ? null : \NGS\Converter\PrimitiveConverter::toString($data['slikeKadeURI']);
        unset($data['slikeKadeURI']);

        if (count($data) !== 0 && \NGS\Utils::WarningsAsErrors())
            throw new \InvalidArgumentException('Superflous array keys found in "PopisKada\Kada" constructor: '.implode(', ', array_keys($data)));
    }

// ============================================================================

    /**
     * Helper getter function, body for magic method $this->__get('URI')
     * URI is a string representation of the primary key.
     *
     * @return string unique resource identifier representing this object
     */
    public function getURI()
    {
        return $this->URI;
    }

    /**
     * @return a uuid
     */
    public function getID()
    {
        return $this->ID;
    }

    /**
     * @return a timestamp with time zone
     */
    public function getDodana()
    {
        return $this->dodana;
    }

    /**
     * @return a timestamp with time zone, can be null
     */
    public function getOdobrena()
    {
        return $this->odobrena;
    }

    /**
     * @return a timestamp with time zone, can be null
     */
    public function getOdbijena()
    {
        return $this->odbijena;
    }

    /**
     * @return an integer number
     */
    public function getBrojacSlanja()
    {
        return $this->brojacSlanja;
    }

    /**
     * @return a uuid, can be null
     */
    public function getSlikeKadeID()
    {
        return $this->slikeKadeID;
    }

    /**
     * @return a reference to an object of class "Resursi\SlikeKade"
     */
    public function getSlikeKadeURI()
    {
        return $this->slikeKadeURI;
    }

    /**
     * @return an object of class "Resursi\SlikeKade", can be null
     */
    public function getSlikeKade()
    {
        if ($this->slikeKadeURI !== null && $this->slikeKade === null)
            $this->slikeKade = \NGS\Patterns\Repository::instance()->find('Resursi\\SlikeKade', $this->slikeKadeURI);
        return $this->slikeKade;
    }

    /**
     * Property getter which throws Exceptions on invalid access
     *
     * @param string $name Property name
     *
     * @return mixed
     */
    public function __get($name)
    {
        if ($name === 'URI')
            return $this->getURI(); // a string representing a unique object identifier
        if ($name === 'ID')
            return $this->getID(); // a uuid
        if ($name === 'dodana')
            return $this->getDodana(); // a timestamp with time zone
        if ($name === 'odobrena')
            return $this->getOdobrena(); // a timestamp with time zone, can be null
        if ($name === 'odbijena')
            return $this->getOdbijena(); // a timestamp with time zone, can be null
        if ($name === 'brojacSlanja')
            return $this->getBrojacSlanja(); // an integer number
        if ($name === 'slikeKadeID')
            return $this->getSlikeKadeID(); // a uuid, can be null
        if ($name === 'slikeKadeURI')
            return $this->getSlikeKadeURI(); // a reference to an object of class "Resursi\SlikeKade"
        if ($name === 'slikeKade')
            return $this->getSlikeKade(); // an object of class "Resursi\SlikeKade", can be null

        throw new \InvalidArgumentException('Property "'.$name.'" in class "PopisKada\Kada" does not exist and could not be retrieved!');
    }

// ============================================================================

    /**
     * Property existence checker
     *
     * @param string $name Property name to check for existence
     *
     * @return bool will return true if and only if the propery exist and is not null
     */
    public function __isset($name)
    {
        if ($name === 'URI')
            return $this->URI !== null;
        if ($name === 'ID')
            return true; // a uuid (always set)
        if ($name === 'odobrena')
            return $this->getOdobrena() !== null; // a timestamp with time zone, can be null
        if ($name === 'odbijena')
            return $this->getOdbijena() !== null; // a timestamp with time zone, can be null
        if ($name === 'brojacSlanja')
            return true; // an integer number (always set)
        if ($name === 'slikeKade')
            return $this->getSlikeKade() !== null; // an object of class "Resursi\SlikeKade", can be null

        return false;
    }

    private static $_read_only_properties = array('URI', 'dodana', 'slikeKadeID', 'slikeKadeURI');

    /**
     * @param \NGS\UUID $value a uuid
     *
     * @return \NGS\UUID
     */
    public function setID($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "ID" cannot be set to null because it is non-nullable!');
        $value = new \NGS\UUID($value);
        $this->ID = $value;
        return $value;
    }

    /**
     * @param \NGS\Timestamp $value a timestamp with time zone
     *
     * @return \NGS\Timestamp
     */
    private function setDodana($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "dodana" cannot be set to null because it is non-nullable!');
        $value = new \NGS\Timestamp($value);
        $this->dodana = $value;
        return $value;
    }

    /**
     * @param \NGS\Timestamp $value a timestamp with time zone, can be null
     *
     * @return \NGS\Timestamp
     */
    public function setOdobrena($value)
    {
        $value = $value !== null ? new \NGS\Timestamp($value) : null;
        $this->odobrena = $value;
        return $value;
    }

    /**
     * @param \NGS\Timestamp $value a timestamp with time zone, can be null
     *
     * @return \NGS\Timestamp
     */
    public function setOdbijena($value)
    {
        $value = $value !== null ? new \NGS\Timestamp($value) : null;
        $this->odbijena = $value;
        return $value;
    }

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    public function setBrojacSlanja($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "brojacSlanja" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->brojacSlanja = $value;
        return $value;
    }

    /**
     * @param \NGS\UUID $value a uuid, can be null
     *
     * @return \NGS\UUID
     */
    private function setSlikeKadeID($value)
    {
        $value = $value !== null ? new \NGS\UUID($value) : null;
        $this->slikeKadeID = $value;
        return $value;
    }

    /**
     * @param \Resursi\SlikeKade $value an object of class "Resursi\SlikeKade", can be null
     *
     * @return \Resursi\SlikeKade
     */
    public function setSlikeKade($value)
    {
        $value = $value !== null ? \Resursi\SlikeKadeArrayConverter::fromArray($value) : null;
        if ($value !== null && $value->URI === null)
            throw new \InvalidArgumentException('Value of property "slikeKade" cannot have URI set to null because it\'s a reference! Reference values must have non-null URIs!');
        $this->slikeKade = $value;
        $this->slikeKadeURI = $value === null ? null : $value->URI;
        if ($value === null && $this->slikeKadeID !== null) {
            $this->slikeKadeID = null;
        } elseif ($value !== null) {
            $this->slikeKadeID = $value->ID;
        }
        return $value;
    }

    /**
     * Property setter which checks for invalid access to entity properties and enforces proper type checks
     *
     * @param string $name Property name
     * @param mixed $value Property value
     */
    public function __set($name, $value)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" in "PopisKada\Kada" cannot be set, because it is read-only!');
        if ($name === 'ID')
            return $this->setID($value); // a uuid
        if ($name === 'odobrena')
            return $this->setOdobrena($value); // a timestamp with time zone, can be null
        if ($name === 'odbijena')
            return $this->setOdbijena($value); // a timestamp with time zone, can be null
        if ($name === 'brojacSlanja')
            return $this->setBrojacSlanja($value); // an integer number
        if ($name === 'slikeKade')
            return $this->setSlikeKade($value); // an object of class "Resursi\SlikeKade", can be null
        throw new \InvalidArgumentException('Property "'.$name.'" in class "PopisKada\Kada" does not exist and could not be set!');
    }

    /**
     * Will unset a property if it exists, but throw an exception if it is not nullable
     *
     * @param string $name Property name to unset (set to null)
     */
    public function __unset($name)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" cannot be unset, because it is read-only!');
        if ($name === 'ID')
            throw new \LogicException('The property "ID" cannot be unset because it is non-nullable!'); // a uuid (cannot be unset)
        if ($name === 'odobrena')
            $this->setOdobrena(null);; // a timestamp with time zone, can be null
        if ($name === 'odbijena')
            $this->setOdbijena(null);; // a timestamp with time zone, can be null
        if ($name === 'brojacSlanja')
            throw new \LogicException('The property "brojacSlanja" cannot be unset because it is non-nullable!'); // an integer number (cannot be unset)
        if ($name === 'slikeKade')
            $this->setSlikeKade(null);; // an object of class "Resursi\SlikeKade", can be null
    }

    /**
     * Create or update PopisKada\Kada instance (server call)
     *
     * @return modified instance object
     */
    public function persist()
    {

        $newObject = parent::persist();
        $this->updateWithAnother($newObject);

        return $this;
    }

    private function updateWithAnother(\PopisKada\Kada $result)
    {
        $this->URI = $result->URI;

        $this->ID = $result->ID;
        $this->dodana = $result->dodana;
        $this->odobrena = $result->odobrena;
        $this->odbijena = $result->odbijena;
        $this->brojacSlanja = $result->brojacSlanja;
        $this->slikeKadeID = $result->slikeKadeID;
        $this->slikeKade = $result->slikeKade;
        $this->slikeKadeURI = $result->slikeKadeURI;
    }

    public function toJson()
    {
        return \PopisKada\KadaJsonConverter::toJson($this);
    }

    public static function fromJson($item)
    {
        return \PopisKada\KadaJsonConverter::fromJson($item);
    }

    public function __toString()
    {
        return 'PopisKada\Kada'.$this->toJson();
    }

    public function __clone()
    {
        return \PopisKada\KadaArrayConverter::fromArray(\PopisKada\KadaArrayConverter::toArray($this));
    }

    public function toArray()
    {
        return \PopisKada\KadaArrayConverter::toArray($this);
    }

    /**
     * Implementation of the IteratorAggregate interface via \ArrayIterator
     *
     * @return Traversable a new iterator specially created for this iteratation
     */
    public function getIterator()
    {
        return new \ArrayIterator(\PopisKada\KadaArrayConverter::toArray($this));
    }
}