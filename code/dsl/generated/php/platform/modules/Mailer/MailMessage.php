<?php
namespace Mailer;

require_once __DIR__.'/MailMessageJsonConverter.php';
require_once __DIR__.'/MailMessageArrayConverter.php';

/**
 * Generated from NGS DSL
 *
 * @property string $URI a unique object identifier (read-only)
 * @property \NGS\UUID $ID autogenerated by server (read-only)
 * @property string $Message a string
 * @property \NGS\Timestamp $SentAt a timestamp with time zone, can be null
 * @property int $Attempts an integer number
 * @property int $RetriesAllowed an integer number
 * @property array $Errors an array of strings
 *
 * @package Mailer
 * @version 0.9.9 beta
 */
class MailMessage extends \NGS\Patterns\AggregateRoot implements \IteratorAggregate
{
    protected $URI;
    protected $ID;
    protected $Message;
    protected $SentAt;
    protected $Attempts;
    protected $RetriesAllowed;
    protected $Errors;

    /**
     * Constructs object using a key-property array or instance of class "Mailer\MailMessage"
     *
     * @param array|void $data key-property array or instance of class "Mailer\MailMessage" or pass void to provide all fields with defaults
     */
    public function __construct($data = array(), $construction_type = '')
    {
        if(is_array($data) && $construction_type !== 'build_internal') {
            foreach($data as $key => $val) {
                if(in_array($key, self::$_read_only_properties, true))
                    throw new \LogicException($key.' is a read only property and can\'t be set through the constructor.');
            }
        }
        if (is_array($data)) {
            $this->fromArray($data);
        } else {
            throw new \InvalidArgumentException('Constructor parameter must be an array! Type was: '.\NGS\Utils::getType($data));
        }
    }

    /**
     * Supply default values for uninitialized properties
     *
     * @param array $data key-property array which will be filled in-place
     */
    private static function provideDefaults(array &$data)
    {
        if(!array_key_exists('URI', $data))
            $data['URI'] = null; //a string representing a unique object identifier
        if(!array_key_exists('ID', $data))
            $data['ID'] = new \NGS\UUID(); // a uuid
        if(!array_key_exists('Message', $data))
            $data['Message'] = ''; // a string
        if(!array_key_exists('Attempts', $data))
            $data['Attempts'] = 0; // an integer number
        if(!array_key_exists('RetriesAllowed', $data))
            $data['RetriesAllowed'] = 0; // an integer number
        if(!array_key_exists('Errors', $data))
            $data['Errors'] = array(); // an array of strings
    }

    /**
     * Constructs object from a key-property array
     *
     * @param array $data key-property array
     */
    private function fromArray(array $data)
    {
        $this->provideDefaults($data);

        if(isset($data['URI']))
            $this->URI = \NGS\Converter\PrimitiveConverter::toString($data['URI']);
        unset($data['URI']);
        if (array_key_exists('ID', $data))
            $this->setID($data['ID']);
        unset($data['ID']);
        if (array_key_exists('Message', $data))
            $this->setMessage($data['Message']);
        unset($data['Message']);
        if (array_key_exists('SentAt', $data))
            $this->setSentAt($data['SentAt']);
        unset($data['SentAt']);
        if (array_key_exists('Attempts', $data))
            $this->setAttempts($data['Attempts']);
        unset($data['Attempts']);
        if (array_key_exists('RetriesAllowed', $data))
            $this->setRetriesAllowed($data['RetriesAllowed']);
        unset($data['RetriesAllowed']);
        if (array_key_exists('Errors', $data))
            $this->setErrors($data['Errors']);
        unset($data['Errors']);

        if (count($data) !== 0 && \NGS\Utils::WarningsAsErrors())
            throw new \InvalidArgumentException('Superflous array keys found in "Mailer\MailMessage" constructor: '.implode(', ', array_keys($data)));
    }

// ============================================================================

    /**
     * Helper getter function, body for magic method $this->__get('URI')
     * URI is a string representation of the primary key.
     *
     * @return string unique resource identifier representing this object
     */
    public function getURI()
    {
        return $this->URI;
    }

    /**
     * @return a uuid
     */
    public function getID()
    {
        return $this->ID;
    }

    /**
     * @return a string
     */
    public function getMessage()
    {
        return $this->Message;
    }

    /**
     * @return a timestamp with time zone, can be null
     */
    public function getSentAt()
    {
        return $this->SentAt;
    }

    /**
     * @return an integer number
     */
    public function getAttempts()
    {
        return $this->Attempts;
    }

    /**
     * @return an integer number
     */
    public function getRetriesAllowed()
    {
        return $this->RetriesAllowed;
    }

    /**
     * @return an array of strings
     */
    public function getErrors()
    {
        return $this->Errors;
    }

    /**
     * Property getter which throws Exceptions on invalid access
     *
     * @param string $name Property name
     *
     * @return mixed
     */
    public function __get($name)
    {
        if ($name === 'URI')
            return $this->getURI(); // a string representing a unique object identifier
        if ($name === 'ID')
            return $this->getID(); // a uuid
        if ($name === 'Message')
            return $this->getMessage(); // a string
        if ($name === 'SentAt')
            return $this->getSentAt(); // a timestamp with time zone, can be null
        if ($name === 'Attempts')
            return $this->getAttempts(); // an integer number
        if ($name === 'RetriesAllowed')
            return $this->getRetriesAllowed(); // an integer number
        if ($name === 'Errors')
            return $this->getErrors(); // an array of strings

        throw new \InvalidArgumentException('Property "'.$name.'" in class "Mailer\MailMessage" does not exist and could not be retrieved!');
    }

// ============================================================================

    /**
     * Property existence checker
     *
     * @param string $name Property name to check for existence
     *
     * @return bool will return true if and only if the propery exist and is not null
     */
    public function __isset($name)
    {
        if ($name === 'URI')
            return $this->URI !== null;
        if ($name === 'Message')
            return true; // a string (always set)
        if ($name === 'SentAt')
            return $this->getSentAt() !== null; // a timestamp with time zone, can be null
        if ($name === 'Attempts')
            return true; // an integer number (always set)
        if ($name === 'RetriesAllowed')
            return true; // an integer number (always set)
        if ($name === 'Errors')
            return true; // an array of strings (always set)

        return false;
    }

    private static $_read_only_properties = array('URI', 'ID');

    /**
     * @param \NGS\UUID $value a uuid
     *
     * @return \NGS\UUID
     */
    private function setID($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "ID" cannot be set to null because it is non-nullable!');
        $value = new \NGS\UUID($value);
        $this->ID = $value;
        return $value;
    }

    /**
     * @param string $value a string
     *
     * @return string
     */
    public function setMessage($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "Message" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toString($value);
        $this->Message = $value;
        return $value;
    }

    /**
     * @param \NGS\Timestamp $value a timestamp with time zone, can be null
     *
     * @return \NGS\Timestamp
     */
    public function setSentAt($value)
    {
        $value = $value !== null ? new \NGS\Timestamp($value) : null;
        $this->SentAt = $value;
        return $value;
    }

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    public function setAttempts($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "Attempts" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->Attempts = $value;
        return $value;
    }

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    public function setRetriesAllowed($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "RetriesAllowed" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->RetriesAllowed = $value;
        return $value;
    }

    /**
     * @param array $value an array of strings
     *
     * @return array
     */
    public function setErrors($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "Errors" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toStringArray($value, false);
        $this->Errors = $value;
        return $value;
    }

    /**
     * Property setter which checks for invalid access to entity properties and enforces proper type checks
     *
     * @param string $name Property name
     * @param mixed $value Property value
     */
    public function __set($name, $value)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" in "Mailer\MailMessage" cannot be set, because it is read-only!');
        if ($name === 'Message')
            return $this->setMessage($value); // a string
        if ($name === 'SentAt')
            return $this->setSentAt($value); // a timestamp with time zone, can be null
        if ($name === 'Attempts')
            return $this->setAttempts($value); // an integer number
        if ($name === 'RetriesAllowed')
            return $this->setRetriesAllowed($value); // an integer number
        if ($name === 'Errors')
            return $this->setErrors($value); // an array of strings
        throw new \InvalidArgumentException('Property "'.$name.'" in class "Mailer\MailMessage" does not exist and could not be set!');
    }

    /**
     * Will unset a property if it exists, but throw an exception if it is not nullable
     *
     * @param string $name Property name to unset (set to null)
     */
    public function __unset($name)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" cannot be unset, because it is read-only!');
        if ($name === 'Message')
            throw new \LogicException('The property "Message" cannot be unset because it is non-nullable!'); // a string (cannot be unset)
        if ($name === 'SentAt')
            $this->setSentAt(null);; // a timestamp with time zone, can be null
        if ($name === 'Attempts')
            throw new \LogicException('The property "Attempts" cannot be unset because it is non-nullable!'); // an integer number (cannot be unset)
        if ($name === 'RetriesAllowed')
            throw new \LogicException('The property "RetriesAllowed" cannot be unset because it is non-nullable!'); // an integer number (cannot be unset)
        if ($name === 'Errors')
            throw new \LogicException('The property "Errors" cannot be unset because it is non-nullable!'); // an array of strings (cannot be unset)
    }

    /**
     * Create or update Mailer\MailMessage instance (server call)
     *
     * @return modified instance object
     */
    public function persist()
    {

        $newObject = parent::persist();
        $this->updateWithAnother($newObject);

        return $this;
    }

    private function updateWithAnother(\Mailer\MailMessage $result)
    {
        $this->URI = $result->URI;

        $this->Message = $result->Message;
        $this->SentAt = $result->SentAt;
        $this->Attempts = $result->Attempts;
        $this->RetriesAllowed = $result->RetriesAllowed;
        $this->Errors = $result->Errors;
        $this->ID = $result->ID;
    }

    public function toJson()
    {
        return \Mailer\MailMessageJsonConverter::toJson($this);
    }

    public static function fromJson($item)
    {
        return \Mailer\MailMessageJsonConverter::fromJson($item);
    }

    public function __toString()
    {
        return 'Mailer\MailMessage'.$this->toJson();
    }

    public function __clone()
    {
        return \Mailer\MailMessageArrayConverter::fromArray(\Mailer\MailMessageArrayConverter::toArray($this));
    }

    public function toArray()
    {
        return \Mailer\MailMessageArrayConverter::toArray($this);
    }

    /**
     * Implementation of the IteratorAggregate interface via \ArrayIterator
     *
     * @return Traversable a new iterator specially created for this iteratation
     */
    public function getIterator()
    {
        return new \ArrayIterator(\Mailer\MailMessageArrayConverter::toArray($this));
    }
}